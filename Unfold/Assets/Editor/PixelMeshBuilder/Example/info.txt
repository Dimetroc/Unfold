Pixel Mesh Builder is a simple plugin for creating meshes from sprites.
There are three ways to create meshes out of sprites using this plugin: by code (PixelMeshBuilder class),by MonoBehavoiur component (PMBComponent),by special editor window (PMBWindow)

Each of these ways require a user to be familiar with a few main parameters: meshQuality, scale, optimized, recalcNormals.

Mesh quality - corresponds to the overall quality of the generated mesh. There are three levels of mesh quality:
Low - mesh is generated as a series of stripes. This results in a bigger amount of vertices and triangles. Also overdraw is noticeable since every face is drawn.
Medium - mesh is also generated as a series of stripes. Same size stripes are combined to reduce vertices and triangles count. Overdraw is reduced by not drawing the faces that are fully covered by another stripes. 
High - mesh is generated by creating front and back faces and by joining them with side faces. This way minimizes amount of vertices and triangles created. Overdraw is also reduced to the minimum.

Note: Mesh qualiuty reflects on overall mesh generation time, higher quality mesh takes longer time to generate.

Scale - sets the final size of the mesh.
Optimization (optimized) - if set to true will run standard unity mesh optimization method (mesh.Optimize()) on a mesh before returning it.         

Recalculate normals (recalcNormals) - sets normals which will be used in the final mesh: calculated by unity method mesh.RecalcNormals() or by a script.

Creating mesh from code

Here is an example of mesh creation by using a PixelMeshBuilder class:

	//Create a PixelMeshBuilder class of desired quility
	var meshBuilder = new PixelMeshBuilder(MeshQuality.High);

	//Simply pass all needed parameters to the BuildMesh()
	//method and it will return generated mesh
	var mesh = meshBuilder.BuildMesh(sprite, new Vector3(1, 1, 1), true, true);

Another option is to add a PMBComponent to the gameObject, setting all the required parameters and calling GenerateMesh() method on it:

        //Add component to the gameObject
        var pmb = gameObject.AddComponent<PMBComponent>();
        //Set sprite
        pmb.Sprite = sprite;
        //Call GenerateMesh() method
        pmb.GenerateMesh();

Warning! PMBComponent requires MeshFilter and MeshRenderer to be on the same GameObject. PMBComponent will assign mesh to the MeshFilter as well as material to the MeshRenderer after generating the mesh.

Creating mesh using PMBComponent

Add component to the GameObject either by toolbar Component -> Scripts-> PMB  -> PMBComponent or by inspector AddComponent -> Scripts -> PMB -> PMBComponent. 

If there is no MeshFilter or MeshRenderer on the GameObject, they will be added automatically. 

RunOnStart - defines if mesh will be generated on Start or by GenerateMesh() method call.
Use Auto Material - defines if material will be created automatically or it will be provided. Setting this parameter to false will show a material field.
Use Unlit - defines if shader for the material will be Unlit/Texture or it will be provided. Setting this parameter to false will show a shader field.

When PMBComponent script generates a mesh it also can create a material based on the texture from the sprite. There is no need to set the material of the MeshRenderer in the inspector, script will do this automatically.

Creating mesh by using PMBWindow

Open PMBWindow by cklicking Window -> Pixel Mesh Builder. 

This method allows multiple meshes to be created from multiple sprites. Just add sprites, choose mesh parameters and click the Generate and Save button and select destination folder.  Meshes will be generated and saved to the selected folder.

Note: Meshes will be named automatically using prefix from the save window and name from sprite.

Documentation - https://sites.google.com/site/bigdgames2016/

Forum - http://forum.unity3d.com/threads/pixel-mesh-builder-tool-for-creation-of-meshes-from-sprites.384585/